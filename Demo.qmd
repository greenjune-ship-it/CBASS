---
title: "CBASS Demo"
author: "Yulia Iakovleva"
format: html
editor: visual
---

## About CBASS

CBASS allows you to process CBASS data. To learn more about CBASS see <https://onlinelibrary.wiley.com/doi/10.1111/gcb.15148>.

## Install CBASS

```{r install-cbass, message=FALSE}
if(!require(devtools)){
    install.packages("devtools")
}

devtools::install_github("greenjune-ship-it/CBASS", quiet = TRUE, force = TRUE)
```

## Load Packages

```{r library-packages, message=FALSE}
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(CBASS)
```

## Preprocess and Validate Data

Load the provided example data set:

```{r load-data}
data("cbass_dataset")
head(cbass_dataset)
```

Make your data tidy and validate:

```{r process-and-validate-cbass-dataset}
cbass_dataset <- preprocess_dataset(cbass_dataset)
validate_cbass_dataset(cbass_dataset)
```

## Explore ED50

First you need to decide which grouping property you want to use. For example, I want to merge `Site` , `Condition`, `Species`, `Genotype` as one merged grouping property.

Create models:

```{r fititng-dose-responce-models, warning=FALSE}
grouping_properties <- c("Site", "Condition", "Species", "Genotype")
drm_formula <- "PAM ~ Temperature"
models <- fit_drms(cbass_dataset, grouping_properties, drm_formula)
```

Get ED50 from models:

```{r get-ed50}
ed50 <- get_ed50_by_grouping_property(models)
cbass_dataset <- define_grouping_property(cbass_dataset, grouping_properties)

ed50_df <- 
  left_join(ed50, cbass_dataset, by = "GroupingProperty") %>%
  select(names(ed50), all_of(grouping_properties)) %>%
  distinct()

head(ed50_df)
```

ED50 Boxplot.

You can choose colorblind-friendly palettes with `display.brewer.all(colorblindFriendly = T)`.

```{r display-ed50}
ggplot(
  ed50_df, aes(x=Condition, y=ED50, color = Species)) +
  geom_boxplot() + 
  facet_grid(~Site) +
  scale_color_brewer(palette = "Set2")
```

## Temperature Response Curve

Predict PAM values for

```{r predict-PAM-values}
# the default number of values for range of temperatures is 100
temp_ranges <- define_temperature_ranges(cbass_dataset$Temperature)
predictions <- get_predicted_pam_values(models, temp_ranges)
head(predictions)
```

Preprocess data for visualization

```{r preprocess-pam-predictions}
predictions_df <- 
  left_join(predictions,
            cbass_dataset %>% select(c(all_of(grouping_properties), GroupingProperty)),
            by = "GroupingProperty",
            relationship = "many-to-many") %>%
  distinct()

head(predictions_df)
```
